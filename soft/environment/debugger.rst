.. index:: Debugger

.. _Debugger:

Debugger(デバッガ)
============================
| :ref:`ICE` で実機に接続した際に使用する。
| 色々と共通の機能がある為紹介する。

.. index:: 混合表示

.. _混合表示:

混合表示
------------
| Cソースと、機械語翻訳結果のアセンブラを混合して表示する機能。
| 静的解析で指摘された場合、正常に動作する事を証明する為に動作を確認したりする。
| コンパイラがどのように翻訳するのかを知る為の分かり易い手助けになる為暇があれば見ることを推奨する。
| 尚、実機デバッグ中でないと基本表示されない。

.. index:: Watch

.. _Watch:

Watch
-------------
| 変数を監視することをそのままWatchという。
| ここに入るのは基本的にグローバル変数である。
| それはグローバル変数は常に同じ領域を占有しているためである。
| ローカル変数は呼ばれるたびにSTACK領域に確保される為、
| 別の関数実行中に普通に上書きされる。
| その為ローカル変数をWatchする場合はちゃんとその関数が実行中の時に中身を見よう。

.. index:: Call Stack

.. _Call Stack:

Call Stack
--------------
| 関数がどう呼ばれていったかを示すログ。
| 頑張れば :ref:`ベクタテーブル` 内のどの割り込み関数がCallされたのかも判別できる。

.. index:: Break

.. _Break:

Break
-----------
| デバッグ中に指定の行が実行されそうになったら動作を中断する機能。
| 非常に便利なのだがいくつか注意点がある。

* Break中にも割り込みは動作しようとする。
    設定で「Break中の割込み動作禁止」などという項目がある為必ず確認する事。

* デバッグ中のマイコンがBreakしても他のマイコンは動作し続けている。
    | 通信シーケンスと言ったタイミングが絡む動作を確認中にBreakした場合、
    | 相手がタイムアウトとしてシーケンスを中断する恐れがある。
    | その為、シーケンスの過程を :ref:`Watch` で確認するのではなく、ログを出力するようにした方が賢明である。

    .. warning:: 外部Watchdogが居る場合、Break中をフリーズと判断してリセットされる為、デバッグ中は動作停止するようにする。

