.. index:: ベクタテーブル

.. _ベクタテーブル:

ベクタテーブル
==================
| :ref:`ROM` 上には、
| 「この :ref:`割り込み` が発生したらこのアドレスから処理を実行します」
| という一覧が隙間なく並べられた領域が存在する。
| その領域の事をベクタテーブルと呼ぶ。
| そこに :ref:`割り込み関数` を直書きしてもよいのだが、隙間無く並んでいるが故に関数本体を配置する隙間が無い。
| よって代わりに :ref:`割り込み関数` の関数ポインタを配置する。
| ソースコード上ではその領域を埋め尽くすために関数ポインタを延々並べた配列を定義し、
| それを指定のアドレスへ配置することでハードとソフトの動きを連結する。

.. note::
    | 取扱上の注意として、このベクタテーブルの並びはハードウェアマニュアル記載の内容と密接に結び付いている。
    | そのため、変更対応としてベクタテーブルに手を加える際には、必要な個所以外には絶対に触らないようにすること。
    | また、マイコンの構成上多量に予約領域、未使用領域が存在しそこへ同一の関数ポインタを配置することが多々ある。
    | そして、想定外の割り込みが入った場合、どこに入ったのかを究明する事が非常にめんどくさい。

開発上の注意
-------------------

| ここに登録する関数はリセット後の起動処理以外は極力動作時間を短く設計する事。
| 例えばUART通信にてデータを受信する場合、受信したデータをバッファに投げるくらいで済ませ、その連続した内容の妥当性の検証はメインの処理で行う事。
| これによって何かしらの不具合が発生した場合、根治することはシステムの構成上ほぼ手遅れになっている。
| 可能ならば現在の処理時間を把握しておくこと。

