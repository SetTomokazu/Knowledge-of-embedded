.. index:: OS

.. _OS:

OS
==============
| 組み込みで使用されているOSとは

概要
-----------
| 組み込み開発のシステムには、大別してOSを使用するものとしないものがある。
| 基本的にOSがあった方が出来ることは多いのだが、無くても済むレベルの制御しかしないマイコンには
| OSもどきを独自実装してあったりする。
| それらの特性について知っていることを解説する。

OSの役割
-------------
| OSは以下のような役割を果たす。

* 登録されているタスクに適切にサービスを提供する
    必要な機能をタスク単位のモジュールとして分割し、相互に連携させ全体としてのシステムを構築させる
* タスク間のメッセージIFを提供する。
    タスク間のデータのやり取りを行う為に、メッセージという共通規格を提供し各タスクの構造を統一する。
* タスクのイベントを管理する。
    | タスクが動作するかどうかの起因となるのがこのイベントである。
    | このイベントが立つことによりOSはそのタスクを起動する。

* 共通のタイマシステムを管理し、タスクに提供する。
    | タスクが受け持つ仕事の中にはタイマを利用するものが多く存在する。
    | 一定時間後に行う、もしくは一定の周期で繰り返すというものである。
    | その時間はタスク単体では正確にできない為、OSが時間の経過を観測しタスクへと提供する。
    | タスクからタイマを使用する場合は以下のような方法をとる
    |   * 一定時間のsleepをOSに申請し、その時間が過ぎたらサービスを返してもらう
    |   * 一定周期でイベントを発行してもらいその回数をカウントする事で必要な期間を測定する

OSの有無によるシステム構造の違い
--------------------------------
| OSがあろうがなかろうが、その上に複数の :ref:`タスク` があり、相互にメッセージを送り合いながら動作していることは変わらない。
| しかし実際の動きが大きく異なる為、その差分をここに挙げる。

.. csv-table:: **OSの有無によるタスク動作の違い**
    :file: os.csv
    :encoding: 'shift_jis'
    :header-rows: 1
    :stub-columns: 1
    :widths: 10, 30,30

.. [1] そのため、通信等といった長時間必要な処理は割り込みで動作させ、OSもどきとタスクには影響を極力出さないようにする。
.. [2] タスク実行中に途中で動作を止められるため、どうしても止められたくない処理をする場合はディスパッチ禁止状態にすること。
