.. index:: DRBFM
    single: RA; DRBFM

DRBFM
================

| T社一押しの理想論である。

概要
---------

| 仕様変更を受け、それが現行のシステムにどのような影響を与えるのかをメンバー総出で洗い出し、この時点でバグ0を目指すための手法である。
| 作成に一番時間がかかり、そのせいで作成タイミングが最初のはずが最後に回され、しかし納品先で最も重要なそういうドキュメントである。


手順
^^^^^^^^

| 以下にDRBFMの作成手順を示す。
| 内容を説明するよりもこの手順を見た方がやろうとしていることについては察しが付きやすいのではないかと思う。

1. 開発担当者が仕様を受け取る。
2. | システムの項目表から、変更する個所と、その変更によって影響するであろう個所を選出する。
   | この変更する個所を *変更点* 、変更によって影響が出る個所を *変化点* と呼称する。
3. 担当者が導き出した変更点と変化点を簡潔に図を使って初見の人にも分かり易く示す。
4. 担当者が導出した変更点と変化点について、考えられる不具合を列挙しそれを起こさないために設計時点で注意する点、試験時に注意する点を述べる。
5. | 上記変化点、変更点とその対策についてレビューを行い、多角的な視点の下他にもないかを洗い出す。
   | ここで可能な限り大勢を呼べるほど死角が無くなり不具合がゼロに近づくとされているため、上記項目3が必要になる。
6. 5.の結果を基に以降の開発工程を行う。

現場での実態
-----------------

| 確かにDRBFMを常に作成するように開発フローに組み込めば不具合や仕様不守の頻度は圧倒的に下がるであろう。
| しかし、DRBFMそのものの作成に要する時間が非常に大きいため、ITまでやりきってしまってから後追いで作成することが多々ある。
| DRBFMを行うことで仕様に対しての開発工数が体感1.5～2倍になってしまう為、特に緊急対応で納期が短いものに対しては作っている場合ではない事が多い。
| かと言って手抜きでいいわけではなく、寧ろ *納品先で一番中身をチェックされる提出物* であるといっても過言ではない。
