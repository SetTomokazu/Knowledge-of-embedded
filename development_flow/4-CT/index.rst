【``CT``】単体試験
=====================
| 変更、開発箇所が正しく動作することを確認する。

概要
--------
| 実際にマイコンに接続し実機デバッグを行い動作を確認する。
| :doc:`../3-MK/index` で作成したソースコードについて、ホワイトボックステストを行う。
| また、ソースコードの静的解析もここで行う。

作業内容
----------
| 実機デバッグでちまちま見ましょう。

ポート設定確認
^^^^^^^^^^^^^^^^
| ポートの入出力設定を確認する判別手法として、 :doc:`/tools/measurement/oscilloscope` を使用し以下の点を見る。

.. csv-table:: 端子確認事項
    :header-rows: 1

    設定, 確認事項
    入力, 接続している :doc:`/tools/measurement/oscilloscope` のプローブ先端の金属部分に指を当て、波形が乱れる
    Low出力,  :doc:`/tools/measurement/oscilloscope` で電圧値がGND
    High出力,  :doc:`/tools/measurement/oscilloscope` で電圧値がGNDより高い(大体3.3V程度)

タイミング確認
^^^^^^^^^^^^^^^^
| タイミングや経過時間を測定するには、ソース上ではまず不可能である。
| その為、 :doc:`/tools/measurement/oscilloscope` を使用して時間を測定する。
| 測定するためにはデバッグ用に使用していいテストポートがあるはずなのでそちらを使用する。
| 単純に処理速度を測定する場合は以下のようにし、テストポートがHighである時間を測定すればよい。

.. code-block:: c
    :linenos:

    // P_TP1 : テストポートその1
    /* 処理時間測定 */
    void main(void) {
        P_TP1 = 1;       /* テストポートの出力をHighにする */
        hot_start();    /* 測定したい処理 */
        P_TP1 = 0;       /* テストポートの出力をLowにする */
    }

| あるポートを5ms周期に測定し、10回連続でHighの場合検知確定とするといった仕様があった場合、
| この動作を確認するには件のポートとテストポート2つを使用し以下のようにする。

.. code-block:: c
    :linenos:

    // P_DET : 検知対象のポート
    // P_TP1 : テストポートその1
    // P_TP2 : テストポートその2
    void detect(void) {
        /* この関数自体が5ms毎にCallされる */
        P_TP1 = ~P_TP1;     /* 周期測定用テストポートを反転する */
        if(P_DET == HIGH) {
            count++;
            if(count > 10) {
                P_TP2 = 1;  /* 検知確定用テストポートをHighにする */
                /* 検知確定処理 */
            }
        }
    }
