.. index:: Section

.. _Section:

Section
============================
| ROMとRAMを分割した領域のこと。
| 関数や変数を意図的に配置するために使用する。
| これを定めることを「セクションを切る」という。

.. note::
    あくまでソフト的に分割しただけでハードには影響しない。

| セクションには種類があり、そのセクションが内包するオブジェクトを示す。
| オブジェクトを間違った種類のセクションに配置しようとすると追い出され最も手近な適合したセクションに配置される。

目的
------
* :ref:`ベクタテーブル` やレジスタアクセス用構造体など配置すべき場所が決まっているオブジェクトを正しく配置する。

* グローバル変数やローカル変数をそれぞれ隔離し、扱いに失敗しても他の変数に影響しないようにする。
    | 配列の上限を超えてアクセスしてしまった場合、
    | そのアドレスに配置された別の変数が書き換わってしまう。

種類
--------------

STACK
^^^^^^^^^^^
| スタック領域を示す。
| RAM専用。
| 基本的にRAM領域の先頭に配置される。
| 繰り返すがスタックとして使用すると宣言したのはあくまでソフト上の話であり、
| マイコンがそこをスタック領域として使用する為には別途専用のレジスタにスタック開始アドレスを指定する必要がある。

CONST
^^^^^^^^
| constで定義されたバッファを格納する。
| ROM専用。
| switch文のハッシュテーブルもここに格納される。
| ::ref:`ベクタテーブル` もここ。

CODE
^^^^^^^^^
| ソースコードを格納する
| ROMRAM共に使用可能。

DATA
^^^^^^^^^
| グローバルバッファや大きいサイズのローカルバッファなどを格納する。
| RAM専用。

INIT
^^^^^^^^^
| 初期値のあるグローバルバッファを格納する。
| RAM専用。
| が、これができるという事は以下の二つを意味している。

* ROM内にその初期値を別で持っている
* 起動後にどこかのタイミングで勝手にその初期値での初期化を行っている。

