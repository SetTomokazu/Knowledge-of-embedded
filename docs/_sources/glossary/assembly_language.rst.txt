.. index:: Assembly Language, アセンブリ言語

.. _Assembly:

Assembly Language(アセンブリ言語)
=============================================
| マイコンが理解できる機械語を、まだギリギリ人が読めるように直訳したもの。
| これが理解できれば、マイコンがソースコードをどのように処理しているのかを直接把握できる。
| 基本的にはアドレス空間内の上から順番に実行する。
| :ref:`PC` はこの実行アドレスを保存している。
| といってもあんまり複雑な事をしているわけではないので、軽く紹介しよう。


* JUMP, アドレス
    | その名の通り指定したアドレスへジャンプする。
    | Callしたサブ関数を実行できるのは、こいつでサブ関数の配置アドレスに飛んでいるからである。

* BEQ, 比較物A, 比較物B, アドレス
    | フルネームはBranch Equalで、値が等しい場合アドレスへジャンプする。
    | 等しくない場合はそのまま次の行へ進む。
    | つまりはif(比較物A != 比較物B)
    | C言語とパッと見比較文が反転して見えるが、その理由は理解出来るだろう。

    .. code-block:: c
        :linenos:

        if(A != B) {                /* AとBが等しい場合4行目へジャンプ */
            /* Do Something */
        }
        /* Do Something */

* BNE, 比較物A, 比較物B, アドレス
    | フルネームはBranch Not Equal。
    | BEQの逆。

* ADD, 対象, 増加分, 保存先
    | 基本的にアセンブリは一つの事しかできない代表例

    .. code-block:: c

        i++;

    | この行を実行するだけでも、C言語とアセンブリが大きく異なることが分かる。
    | C言語上はi一つしかバッファを使用していないように見えるが、
    | アセンブリでは以下の三つが必要となる。

    * 元々iが格納されていた領域
    * 増加分の1を格納する領域
    * iと1の加算結果を格納する領域
