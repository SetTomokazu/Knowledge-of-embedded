.. index:: HEXファイル

.. _HEXファイル:

HEXファイル
===================
組み込みソフトをビルドした際に出力されるHEXファイルについて説明する。


概要
-------------------------
| マイコンのROM上に書き込まれるソースコードのバイナリをASCIIキャラクタで記述したもの。
| 大抵実行用のバイナリファイルとセットで出力される。
| されない場合でもほぼ必ずどこかに出力するようにする設定項目がある
| モトローラファイルともいう。

.. note::

    | 拡張子が.hexとは限らないので、見当たらない場合ビルド生成物を漁る必要がある。
    | 見たことがある拡張子は以下の通りである。

    * .mot(モトローラファイルの頭だろう)
    * .mhx(モトローラHEXファイル？)

内部構造
---------------
| 全部ここに載ってるので参照
| 載っていないデータがあってもフォーマットを見ていると意味は類察できる
| `HEXファイルフォーマット解説 <http://www.geocities.jp/chako_ratta/micon/s_format.html>`_

用途
------------
| 開発しているソフトのバージョンアップファイルを作成する際にソースとして使用するのがこのHEXファイルとなる。
| 理由として以下が挙げられる。

* ビルド結果の実行ファイル、ABSファイルそのものはファイル名やアドレスの記述方式がマイコン毎に千差万別である上にバイナリファイルである為解析に時間がかかる
* HEXファイルの出力設定を編集することでROMに書かれる全領域のデータをそのまま取得できる
* どのマイコンであっても上記内部構造を知っているだけで作成できる

| つまりは一番分かり易く汎用性がある生成物の為、これを基にツールが作成できれば非常に重用されることになる。

.. note::

    | 大抵初期設定では、関数やテーブルといった中身が詰まっている個所のみを出力するようになっている。
    | そのため、全て埋めたバイナリのフルデータを作成する場合は、ハードウェアマニュアルを見て空き領域の初期値は０なのか0xFFなのかを知る必要がある。
    | また、ビルド時にHEXファイル出力用引数が渡せるのであればその時点で中実なHEXファイルを出力するように設定する。
    | 開発環境を新規構築した際に3番目くらいに確認するべき項目である。

解析
----------------
Pythonが使えるならば解析は大体こんな感じで作っていくのではないか

.. code-block:: python

    hexfile = "target.hex" # 解析するHEXファイル

    def get_detail(line):
        # レコードタイプとデータサイズ、データを返す
        return line[0:2], int(line[2:4], 16), line[4:-2]

    def get_filename(type, size, data):
        if(type != 'S0') return
        # S0レコードの処理

    # 以下各レコードの処理記述

    with open(hexfile, 'r') as hf:
        for line in hf:
            r, s, d = get_detail(line)
            if(r == 'S0'):
                # S0レコードの処理実行
                get_filename(r,s,d)
            elif(r == 'S1'):
                # S1レコードの処理
            #以下同様に分岐
            else:
                pass
