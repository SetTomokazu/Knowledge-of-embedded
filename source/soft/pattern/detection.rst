.. index:: 検知手法

.. _検知手法:

検知手法
============================
| マイコンは基盤内外のデバイスから得られる情報を
| 検知し演算し対応する事が主なお仕事である。
| その検知方法についてよく使用されるものを以下に示す。

.. index:: ポーリング

.. _ポーリング:

ポーリング
-------------
| マイコンの端子状態を一定周期で監視し、異常となる値が一定回数連続すれば異常と判断する事。
| 基本的に :ref:`チャタリング` 対策である。
| 値を確定するまでの時間の事を「チャタリング吸収時間」ともいう
| 大体ソースはこんな感じになる。
| これはHighだけの検知だが、Low側も行う場合は現在の判定結果も保存しておく必要がある。

.. code-block:: c

    #define CHATTER_COUNT 3 /* ポーリング回数 */
    #define CHATTER_SPAN  5 /* ポーリング間隔[ms] */

    void detect(void) {
        /* ポーリング間隔で呼ばれる前提だと思ってください…… */
        if(High == P_DET) {
            count++;
            if(CHATTER_COUNT <= count) {
                /* 確定処理 */
            }
        } else {
            /* そうでない場合カウントを初期化する */
            count = 0;
        }
    }

.. index:: 割り込み検知

.. _割り込み検知:

割り込み検知
============================
| 割り込みを利用して検知を行う場合、以下の二種類がある。

* マイコンのペリフェラルが提供する割り込み

* ただの端子の状態変化を割り込みで検知する

| どちらも共通しているのは、以下の二つである。

* 基本的に割り込み関数内ではグローバルバッファに結果を格納するだけに留める。
* その機能や検知を行うタスクが動作する際にその結果を刈り取って制御を行う。

.. note::
    | ペリフェラルの割り込み検知にて、稀に見受けられるのが、
    | 割り込み関数を登録せずにforループで処理の完了を待つものである。
    | これの目的はタイムアウトをきちんとソース上で制御する事と
    | マイコンを載せ替えたときに変更個所を少なくするためである。
